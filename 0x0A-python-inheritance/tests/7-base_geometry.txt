7-base_geometry.py
==================

::
	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
	>>> bg = BaseGeometry()
	>>> type(bg)
	<class '7-base_geometry.BaseGeometry'>
	>>> print(bg) # doctest: +ELLIPSIS
	<7-base_geometry.BaseGeometry object at 0x...>

::

	>>> bg = BaseGeometry(None)
	Traceback (most recent call last):
	TypeError: ...

::
	>>> bg = BaseGeometry()
	>>> bg.integer_validator("length", 3)

	>>> bg = BaseGeometry()
	>>> bg.integer_validator("length", "a")
	Traceback (most recent call last):
	TypeError: length must be an integer

::	
	>>> bg = BaseGeometry()
	>>> bg.integer_validator("length", -3)
	Traceback (most recent call last):
	ValueError: length must be greater than 0

::	
	>>> bg = BaseGeometry()
	>>> bg.area()
	Traceback (most recent call last):
	Exception: area() is not implemented

::

    	>>> bg = BaseGeometry()
    	>>> print(bg.area) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
	<bound method BaseGeometry.area of <7-base_geometry.BaseGeometry object at 0x...>>

	>>> bg.integer_validator("valid number", 1)


::
	>>> bg = BaseGeometry()
	>>> bg.integer_validator()
	Traceback (most recent call last):
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

::

    	>>> print(bg.integer_validator) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
    	<bound method BaseGeometry.integer_validator of <7-base_geometry.BaseGeometry 
    	object at...>>


	>>> bg = BaseGeometry()
	>>> bg.integer_validator("test")
	Traceback (most recent call last):
	TypeError: integer_validator() missing 1 required positional argument: 'value'

::
	>>> bg = BaseGeometry()
	>>> bg.area("test")
	Traceback (most recent call last):
	TypeError: area() takes 1 positional argument but 2 were given

::
    	>>> bg.integer_validator("test", True)
   	Traceback (most recent call last):
    	TypeError: test must be an integer


    	>>> bg.integer_validator("invalid number", "number")
    	Traceback (most recent call last):
    	TypeError: invalid number must be an integer

::
	>>> bg.integer_validator("test", (1, 3))
    	Traceback (most recent call last):
    	TypeError: test must be an integer

::

	>>> bg.integer_validator("test", {})
    	Traceback (most recent call last):
    	TypeError: test must be an integer

::

	>>> bg.integer_validator("test", [1, 3, 4])
    	Traceback (most recent call last):
    	TypeError: test must be an integer

::

    	>>> bg.integer_validator("test", None)
    	Traceback (most recent call last):
    	TypeError: test must be an integer

::

    	>>> bg.integer_validator("invalid int", -1)
    	Traceback (most recent call last):
    	ValueError: invalid int must be greater than 0

::

    	>>> bg.integer_validator("invalid int", 0)
    	Traceback (most recent call last):
    	ValueError: invalid int must be greater than 0

::
    	>>> bg.integer_validator(123, (1, 2, 3))
    	Traceback (most recent call last):
    	TypeError: 123 must be an integer
