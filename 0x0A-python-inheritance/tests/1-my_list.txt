============
1-my_list.py
============

This library defines a class named MyList that inheris from list
contains a function `print_sorted(self)`

instantiation
=============

::
	>>> MyList = __import__('1-my_list').MyList
	>>> my_list = MyList()
	>>> print(my_list)
	[]

::
	>>> type(my_list)
	<class '1-my_list.MyList'>

::

::	
	>>> my_list = MyList([])
	>>> print(my_list)
	[]
	
	>>> my_list = MyList([1, 2, 3])
	>>> print(my_list)
	[1, 2, 3]

::
	>>> my_list = MyList([[1, 2, 3], [1, 2, 3]])
	>>> print(my_list)
	[[1, 2, 3], [1, 2, 3]]



::

	>>> my_list = MyList(1, 3, 4)
	Traceback (most recent call last):
	TypeError: list expected at most 1 argument, got 3


use
===
::
	>>> my_list = MyList()
	>>> my_list.append(1)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> print(my_list)
	[1, 2, 3]

::
	
	>>> my_list = MyList([1, 2, 3, 4])
	>>> my_list.pop()
	4
	>>> my_list.pop()
	3
	>>> print(my_list)
	[1, 2]



`print_sorted`
==============
::
	>>> my_list = MyList([1, 4, 5, 2, 6])
	>>> print(my_list)
	[1, 4, 5, 2, 6]

	>>> my_list.print_sorted()
	[1, 2, 4, 5, 6]

::
	>>> my_list = MyList([1, 4, 5, 2, 6])
	>>> print(my_list)
	[1, 4, 5, 2, 6]

	>>> my_list.print_sorted(1)
	Traceback (most recent call last):
	TypeError: print_sorted() takes 1 positional argument but 2 were given

::
	>>> my_list = MyList([])
	>>> my_list.print_sorted()
	[]

::
	>>> my_list = MyList()
	>>> my_list.append("z")
	>>> my_list.append("d")
	>>> my_list.append("h")
	>>> my_list.append("b")
	>>> my_list.append("a")
	>>> my_list.print_sorted()
	['a', 'b', 'd', 'h', 'z']

	>>> print(my_list)
	['z', 'd', 'h', 'b', 'a']


::
	>>> my_list = MyList(["a", "b", "c", 1, 2])
	>>> my_list.print_sorted()
	Traceback (most recent call last):
	TypeError: '<' not supported between instances of 'int' and 'str'
